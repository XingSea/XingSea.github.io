[{"content":"MySQL 基本 SQL 语句使用详解 在数据库管理系统中，MySQL 凭借其开源、高效、稳定等特点，成为众多开发者的首选。SQL（Structured Query Language）作为操作 MySQL 数据库的核心语言，掌握其基本语句的使用是进行数据库开发与管理的基础。本文将详细介绍 MySQL 中常用的基本 SQL 语句及其使用方法。\n一、数据库操作 1. 创建数据库 使用CREATE DATABASE语句可以创建一个新的数据库，语法如下：\n1 CREATE DATABASE database_name; 其中，database_name是你想要创建的数据库名称。例如，创建一个名为testdb的数据库：\n1 CREATE DATABASE testdb; 为了避免数据库已存在导致创建失败的错误，可以使用CREATE DATABASE IF NOT EXISTS语句，它会先检查数据库是否存在，若不存在则创建：\n1 CREATE DATABASE IF NOT EXISTS testdb; 2. 选择数据库 在对数据库中的表和数据进行操作前，需要先选择要操作的数据库，使用USE语句：\n1 USE database_name; 例如，选择刚刚创建的testdb数据库：\n1 USE testdb; 3. 删除数据库 使用DROP DATABASE语句删除数据库，语法如下：\n1 DROP DATABASE database_name; 比如删除testdb数据库：\n1 DROP DATABASE testdb; 同样，为防止删除不存在的数据库报错，可以使用DROP DATABASE IF EXISTS语句：\n1 DROP DATABASE IF EXISTS testdb; 二、表操作 1. 创建表 在选定数据库后，使用CREATE TABLE语句创建表，语法如下：\n1 2 3 4 5 CREATE TABLE table_name ( column1 datatype constraint, column2 datatype constraint, ... ); 其中，table_name是表名，column是列名，datatype是数据类型（如INT、VARCHAR、DATE等），constraint是约束条件（如NOT NULL、PRIMARY KEY等）。\n例如，在testdb数据库中创建一个名为students的表，包含id（学生编号）、name（学生姓名）、age（学生年龄）字段：\n1 2 3 4 5 CREATE TABLE students ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, age INT ); 上述语句中，id字段设置为主键且自增长，name字段不允许为空。\n2. 查看表结构 使用DESCRIBE或DESC语句可以查看表的结构信息，包括列名、数据类型、是否为NULL、键等：\n1 2 3 DESCRIBE students; -- 或者 DESC students; 3. 修改表 （1）添加列 使用ALTER TABLE语句添加列，语法如下：\n1 ALTER TABLE table_name ADD column_name datatype constraint; 例如，在students表中添加gender（性别）字段：\n1 ALTER TABLE students ADD gender VARCHAR(10); （2）修改列 修改列的数据类型或约束条件，语法如下：\n1 ALTER TABLE table_name MODIFY column_name new_datatype new_constraint; 比如将students表中age字段的数据类型改为TINYINT：\n1 ALTER TABLE students MODIFY age TINYINT; （3）删除列 删除表中的列，语法如下：\n1 ALTER TABLE table_name DROP column_name; 例如，删除students表中的gender字段：\n1 ALTER TABLE students DROP gender; 4. 删除表 使用DROP TABLE语句删除表，语法如下：\n1 DROP TABLE table_name; 删除students表：\n1 DROP TABLE students; 若要防止删除不存在的表报错，可以使用DROP TABLE IF EXISTS语句：\n1 DROP TABLE IF EXISTS students; 三、数据操作 1. 插入数据 （1）插入单条数据 使用INSERT INTO语句插入单条数据，语法如下：\n1 INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...); 例如，向students表中插入一条学生记录：\n1 INSERT INTO students (name, age) VALUES (\u0026#39;Alice\u0026#39;, 20); 如果表中的列是按照默认顺序插入，且不包含自增长列，可以省略列名：\n1 INSERT INTO students VALUES (NULL, \u0026#39;Bob\u0026#39;, 22); （2）插入多条数据 一次插入多条数据，语法如下：\n1 2 3 4 INSERT INTO table_name (column1, column2, ...) VALUES (value1_1, value1_2, ...), (value2_1, value2_2, ...), ...; 例如，向students表中插入两条学生记录：\n1 2 3 INSERT INTO students (name, age) VALUES (\u0026#39;Charlie\u0026#39;, 21), (\u0026#39;David\u0026#39;, 23); 2. 查询数据 使用SELECT语句查询数据，语法如下：\n1 SELECT column1, column2, ... FROM table_name WHERE condition; 其中，column1, column2, \u0026hellip;是要查询的列名，table_name是表名，WHERE子句用于筛选符合条件的数据。\n（1）查询所有列 查询students表中的所有数据：\n1 SELECT * FROM students; （2）查询指定列 查询students表中学生的姓名和年龄：\n1 SELECT name, age FROM students; （3）条件查询 查询students表中年龄大于 20 岁的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20; （4）使用逻辑运算符 查询students表中年龄大于 20 岁且姓名为Bob的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20 AND name = \u0026#39;Bob\u0026#39;; 查询students表中年龄大于 20 岁或者姓名为Alice的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20 OR name = \u0026#39;Alice\u0026#39;; 3. 更新数据 使用UPDATE语句更新数据，语法如下：\n1 UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; 例如，将students表中姓名为Alice的学生年龄更新为 21 岁：\n1 UPDATE students SET age = 21 WHERE name = \u0026#39;Alice\u0026#39;; 4. 删除数据 使用DELETE FROM语句删除数据，语法如下：\n1 DELETE FROM table_name WHERE condition; 例如，删除students表中年龄小于 20 岁的学生记录：\n1 DELETE FROM students WHERE age \u0026lt; 20; 如果省略WHERE子句，将删除表中的所有数据，但表结构依然存在：\n1 DELETE FROM students; 以上就是 MySQL 中最基本也是最常用的 SQL 语句，通过灵活运用这些语句，你可以对 MySQL 数据库进行全面的管理和操作。在实际开发中，还会涉及到更多复杂的查询和操作，如连接查询、子查询、聚合函数等，后续我们将继续深入探讨。\n","date":"2025-06-04T16:10:33+08:00","permalink":"https://XingSea.github.io/p/mysql/","title":"MySQL"}]